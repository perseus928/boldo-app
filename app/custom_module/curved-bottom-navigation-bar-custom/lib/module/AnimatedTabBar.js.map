{"version":3,"sources":["AnimatedTabBar.tsx"],"names":["Animated","addWhitelistedNativeProps","width","stroke","backgroundColor","AnimatedTabBar","props","navigation","tabs","descriptors","duration","DEFAULT_ITEM_ANIMATION_DURATION","barColor","TAB_BAR_COLOR","dotSize","SIZE_DOT","dotColor","isReactNavigation5","state","index","routes","key","navigationIndex","navigationKey","selectedIndex","getRouteTitle","route","options","tabBarLabel","undefined","title","name","getRouteTabConfigs","getRoutes","map","handleSelectedIndexChange","event","emit","type","target","canPreventDefault","defaultPrevented","dispatch","CommonActions","navigate","onTabPress","args","TAB_BAR_HEIGHT"],"mappings":"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","sourcesContent":["import React, { useMemo, useCallback } from 'react';\nimport Animated, { useCode, call, set } from 'react-native-reanimated';\nimport { useValues } from 'react-native-redash';\nimport { CommonActions, Route } from '@react-navigation/native';\nimport { BottomTabBarProps } from '@react-navigation/bottom-tabs';\nimport {\n  TabsConfigsType,\n  TabBarAnimationConfigurableProps,\n} from './types';\nimport CurvedTabBar from './curved/CurvedTabBar'\nimport { SIZE_DOT, TAB_BAR_COLOR, DEFAULT_ITEM_ANIMATION_DURATION, TAB_BAR_HEIGHT } from './curved/constant';\nAnimated.addWhitelistedNativeProps({\n  width: true,\n  stroke: true,\n  backgroundColor: true,\n});\n\ninterface AnimatedTabBarProps\n  extends Pick<BottomTabBarProps, 'state' | 'navigation' | 'descriptors'>,\n  TabBarAnimationConfigurableProps {\n  /**\n   * Tabs configurations.\n   */\n  tabs: TabsConfigsType;\n\n  barColor?: string;\n\n  dotSize?: number;\n\n  dotColor?: string;\n\n}\n\nexport const AnimatedTabBar = (props: AnimatedTabBarProps) => {\n  // props\n  const {\n    navigation,\n    tabs,\n    descriptors,\n    duration = DEFAULT_ITEM_ANIMATION_DURATION,\n    barColor = TAB_BAR_COLOR,\n    dotSize = SIZE_DOT,\n    dotColor = TAB_BAR_COLOR,\n  } = props;\n\n  // variables\n  const isReactNavigation5 = props.state ? true : false;\n  // @ts-ignore\n  const {\n    routes,\n    index: navigationIndex,\n    key: navigationKey,\n  }: { routes: Route<string>[]; index: number; key: string } = useMemo(() => {\n    if (isReactNavigation5) {\n      return props.state;\n    } else {\n      return {\n        // @ts-ignore\n        index: props.navigation.state.index,\n        // @ts-ignore\n        routes: props.navigation.state.routes,\n        key: '',\n      };\n    }\n  }, [props, isReactNavigation5]);\n  const [selectedIndex] = useValues(0);\n\n  //#region callbacks\n  const getRouteTitle = useCallback(\n    (route: Route<string>) => {\n      if (isReactNavigation5) {\n        const { options } = descriptors[route.key];\n        return options.tabBarLabel !== undefined &&\n          typeof options.tabBarLabel === 'string'\n          ? options.tabBarLabel\n          : options.title !== undefined\n            ? options.title\n            : route.name;\n      } else {\n        return route.key;\n      }\n    },\n    [isReactNavigation5, descriptors]\n  );\n\n  const getRouteTabConfigs = useCallback(\n    (route: Route<string>) => {\n      if (isReactNavigation5) {\n        return tabs[route.name];\n      } else {\n        return tabs[route.key];\n      }\n    },\n    [isReactNavigation5, tabs]\n  );\n\n  const getRoutes = useCallback(() => {\n    return routes.map(route => ({\n      key: route.key,\n      ...getRouteTabConfigs(route),\n    }));\n  }, [routes, getRouteTitle, getRouteTabConfigs]);\n\n  const handleSelectedIndexChange = (index: number) => {\n    if (isReactNavigation5) {\n      const { key, name } = routes[index];\n      const event = navigation.emit({\n        type: 'tabPress',\n        target: key,\n        canPreventDefault: true,\n      });\n\n      if (!event.defaultPrevented) {\n        navigation.dispatch({\n          ...CommonActions.navigate(name),\n          target: navigationKey,\n        });\n      }\n    } else {\n      // @ts-ignore\n      const { onTabPress } = props;\n      onTabPress({ route: routes[index] });\n    }\n  };\n  //#endregion\n\n  //#region Effects\n  /**\n * @DEV\n * here we listen to selectedIndex and call `handleSelectedIndexChange`\n */\n  useCode(\n    () =>\n      call([selectedIndex], args => {\n        handleSelectedIndexChange(args[0]);\n      }),\n    [selectedIndex]\n  );\n  /**\n   * @DEV\n   * here we listen to React Navigation index and update\n   * selectedIndex value.\n   */\n  useCode(() =>\n    // @ts-ignore\n    set(selectedIndex, navigationIndex)\n    , [navigationIndex]);\n\n  //#endregion\n\n  // render\n  return (\n    <CurvedTabBar\n      dotColor={dotColor}\n      barHeight={TAB_BAR_HEIGHT}\n      dotSize={dotSize}\n      tabBarColor={barColor}\n      selectedIndex={selectedIndex}\n      routes={getRoutes()}\n      duration={duration}\n    />\n  );\n};\n"]}