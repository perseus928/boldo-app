{"version":3,"sources":["Dot.tsx"],"names":["DotComponent","props","selectedIndex","routes","progress","width","dotColor","dotSize","barHeight","translateX","inputRange","map","item","index","outputRange","length","translateY","HEIGHT_HOLE","opacity","iconContainerStyle","justifyContent","alignItems","dotStyle","styles","dot","backgroundColor","height","bottom","borderRadius","transform","icon","Dot","prevProps","nextProps"],"mappings":"wPAAA,qDACA,4EACA,uFACA,8BAEA,kCACA,qC,2GAIA,GAAMA,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAqB,IAC9BC,CAAAA,aAD8B,CAC2CD,KAD3C,CAC9BC,aAD8B,CACfC,MADe,CAC2CF,KAD3C,CACfE,MADe,CACPC,QADO,CAC2CH,KAD3C,CACPG,QADO,CACGC,KADH,CAC2CJ,KAD3C,CACGI,KADH,CACUC,QADV,CAC2CL,KAD3C,CACUK,QADV,CACoBC,OADpB,CAC2CN,KAD3C,CACoBM,OADpB,CAC6BC,SAD7B,CAC2CP,KAD3C,CAC6BO,SAD7B,CAEtC,GAAMC,CAAAA,UAAU,CAAG,uCAAYP,aAAZ,CAA2B,CAC1CQ,UAAU,CAAEP,MAAM,CAACQ,GAAP,CAAW,SAACC,IAAD,CAAYC,KAAZ,QAA8BA,CAAAA,KAA9B,EAAX,CAD8B,CAE1CC,WAAW,CAAEX,MAAM,CAACQ,GAAP,CAAW,SAACC,IAAD,CAAYC,KAAZ,QACnBA,CAAAA,KAAK,CAAGR,KAAR,CAAgBF,MAAM,CAACY,MAAxB,CAAmCV,KAAK,CAAGF,MAAM,CAACY,MAAhB,CAA0B,CAA5D,CAAiER,OAAO,CAAG,CADvD,EAAX,CAF6B,CAA3B,CAAnB,CAKA,GAAMS,CAAAA,UAAU,CAAG,uCAAYZ,QAAZ,CAAsB,CACrCM,UAAU,CAAE,CAAC,CAAD,CAAI,CAAJ,CADyB,CAErCI,WAAW,CAAE,CAAC,CAAD,CAAI,EAAEN,SAAS,CAAGS,qBAAZ,CAA0B,CAA5B,CAAJ,CAFwB,CAAtB,CAAnB,CAIA,GAAMC,CAAAA,OAAO,CAAG,uCAAYd,QAAZ,CAAsB,CAClCM,UAAU,CAAE,CAAC,CAAD,CAAI,CAAJ,CADsB,CAElCI,WAAW,CAAE,CAAC,GAAD,CAAM,CAAN,CAFqB,CAAtB,CAAhB,CAIA,GAAMK,CAAAA,kBAAkB,CAAG,CACvB,CACID,OAAO,CAAPA,OADJ,CAEIE,cAAc,CAAE,QAFpB,CAGIC,UAAU,CAAE,QAHhB,CADuB,CAA3B,CAOA,GAAMC,CAAAA,QAAQ,CAAG,CACbC,cAAOC,GADM,CAEb,CACInB,KAAK,CAAEE,OADX,CAEIkB,eAAe,CAAEnB,QAFrB,CAGIoB,MAAM,CAAEnB,OAHZ,CAIIoB,MAAM,CAAE,CAJZ,CAKIC,YAAY,CAAErB,OAAO,CAAG,CAL5B,CAMIsB,SAAS,CAAE,CAAC,CAAEpB,UAAU,CAAEA,UAAd,CAAD,CAA6B,CAAEO,UAAU,CAAVA,UAAF,CAA7B,CANf,CAFa,CAAjB,CAWA,MACI,8BAAC,8BAAD,CAAU,IAAV,EAAe,KAAK,CAAEM,QAAtB,6EACI,6BAAC,8BAAD,CAAU,IAAV,EAAe,KAAK,CAAEH,kBAAtB,8EACKhB,MAAM,CAACQ,GAAP,CAAW,cAAWE,KAAX,KAAGiB,CAAAA,IAAH,MAAGA,IAAH,OACR,8BAAC,gBAAD,EAAS,GAAG,CAAEjB,KAAd,CAAqB,KAAK,CAAEA,KAA5B,CAAmC,aAAa,CAAEX,aAAlD,8EACK4B,IAAI,CAAC,CAAE1B,QAAQ,CAARA,QAAF,CAAD,CADT,CADQ,EAAX,CADL,CADJ,CADJ,CAUH,CA3CD,CA6CA,GAAM2B,CAAAA,GAAG,CAAG,gBAAK/B,YAAL,CAAmB,SAACgC,SAAD,CAAYC,SAAZ,QAA0B,8BAAOD,SAAP,CAAkBC,SAAlB,CAA1B,EAAnB,CAAZ,C,aACeF,G","sourcesContent":["import React, { memo } from 'react'\nimport equals from 'react-fast-compare'\nimport Animated, { interpolate } from 'react-native-reanimated'\nimport { styles } from './style'\nimport { DotProps } from '../../types'\nimport { IconDot } from './IconDot'\nimport { HEIGHT_HOLE } from '../constant'\nimport { StyleProp, ViewStyle } from 'react-native'\n\n\nconst DotComponent = (props: DotProps) => {\n    const { selectedIndex, routes, progress, width, dotColor, dotSize, barHeight } = props;\n    const translateX = interpolate(selectedIndex, {\n        inputRange: routes.map((item: any, index: number) => index),\n        outputRange: routes.map((item: any, index: number) =>\n            (index * width / routes.length) + (width / routes.length) / 2 - (dotSize / 2))\n    })\n    const translateY = interpolate(progress, {\n        inputRange: [0, 1],\n        outputRange: [0, -(barHeight - HEIGHT_HOLE + 5)]\n    })\n    const opacity = interpolate(progress, {\n        inputRange: [0, 1],\n        outputRange: [0.2, 1]\n    })\n    const iconContainerStyle = [\n        {\n            opacity,\n            justifyContent: 'center',\n            alignItems: 'center',\n        }\n    ] as StyleProp<Animated.AnimateStyle<ViewStyle>>;\n    const dotStyle = [\n        styles.dot,\n        {\n            width: dotSize,\n            backgroundColor: dotColor,\n            height: dotSize,\n            bottom: 0,\n            borderRadius: dotSize / 2,\n            transform: [{ translateX: translateX }, { translateY }]\n        }\n    ] as StyleProp<Animated.AnimateStyle<ViewStyle>>;\n    return (\n        <Animated.View style={dotStyle}>\n            <Animated.View style={iconContainerStyle}>\n                {routes.map(({ icon }, index: number) =>\n                    <IconDot key={index} index={index} selectedIndex={selectedIndex}>\n                        {icon({ progress })}\n                    </IconDot>)}\n            </Animated.View>\n        </Animated.View>\n    )\n}\n\nconst Dot = memo(DotComponent, (prevProps, nextProps) => equals(prevProps, nextProps))\nexport default Dot\n\n"]}