{"version":3,"sources":["ButtonTabItem.tsx"],"names":["AnimatedRawButton","Animated","createAnimatedComponent","TouchableOpacity","shouldCancelWhenOutside","shouldActivateOnStart","gestureHandler","state","ButtonTabItemComponent","props","index","selectedIndex","countTab","indexAnimated","width","icon","clock","isActive","progress","duration","State","UNDETERMINED","END","containerIconStyle","opacity","inputRange","outputRange","transform","translateY","buttonTab","styles","renderIcon","ButtonTab","prevProps","nextProps"],"mappings":"ibAAA,qDACA,yCACA,4EACA,8BACA,uEACA,uFACA,sD,uHAGA,GAAMA,CAAAA,iBAAiB,CAAG,mDACtBC,+BAASC,uBAAT,CAAiCC,2CAAjC,CADsB,CAEtB,CACIC,uBAAuB,CAAE,IAD7B,CAEIC,qBAAqB,CAAE,IAF3B,CAFsB,CAA1B,CAOA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,KAAD,QACnB,sCAAe,CAAEA,KAAK,CAALA,KAAF,CAAf,CADmB,EAAvB,CAGA,GAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAACC,KAAD,CAA4B,IAC/CC,CAAAA,KAD+C,CACuBD,KADvB,CAC/CC,KAD+C,CACxCC,aADwC,CACuBF,KADvB,CACxCE,aADwC,CACzBC,QADyB,CACuBH,KADvB,CACzBG,QADyB,CACfC,aADe,CACuBJ,KADvB,CACfI,aADe,CACAC,KADA,CACuBL,KADvB,CACAK,KADA,CACOC,IADP,CACuBN,KADvB,CACOM,IADP,CACaC,KADb,CACuBP,KADvB,CACaO,KADb,CAEvD,GAAMC,CAAAA,QAAQ,CAAG,8BAAG,iCAAMJ,aAAN,CAAH,CAAyBH,KAAzB,CAAjB,CACA,GAAMQ,CAAAA,QAAQ,CAAG,4CAAqBD,QAArB,CAA+B,CAAEE,QAAQ,CAAE,GAAZ,CAA/B,CAAjB,CAHuD,eAIvC,iCAAUC,iCAAMC,YAAhB,CAJuC,uDAIhDd,KAJgD,gBAMvD,mCACI,iBACI,gCAAK,+BAAI,8BAAGM,aAAH,CAAkBF,aAAlB,CAAJ,CAAsC,+BAAI,wCAAaK,KAAb,CAAJ,CAAtC,CAAgE,8BAAGT,KAAH,CAAUa,iCAAME,GAAhB,CAAhE,CAAL,CAA4F,CACxF,+BAAIX,aAAJ,CAAmBD,KAAnB,CADwF,CAExF,+BAAIH,KAAJ,CAAWa,iCAAMC,YAAjB,CAFwF,CAA5F,CADJ,EADJ,CAMI,CAACd,KAAD,CAAQS,KAAR,CANJ,EASA,GAAMO,CAAAA,kBAAkB,CAAG,CAAC,CAExBC,OAAO,CAAE,uCAAYN,QAAZ,CAAsB,CAC3BO,UAAU,CAAE,CAAC,CAAD,CAAI,CAAJ,CADe,CAE3BC,WAAW,CAAE,CAAC,CAAD,CAAI,CAAJ,CAFc,CAAtB,CAFe,CAMxBC,SAAS,CAAE,CAAC,CACRC,UAAU,CAAE,uCAAYV,QAAZ,CAAsB,CAC9BO,UAAU,CAAE,CAAC,CAAD,CAAI,CAAJ,CADkB,CAE9BC,WAAW,CAAE,CAAC,CAAD,CAAI,EAAJ,CAFiB,CAAtB,CADJ,CAAD,CANa,CAAD,CAA3B,CAcA,GAAMG,CAAAA,SAAS,CAAG,mBAA8B,iBAAM,CAClDC,cAAOD,SAD2C,CAElD,CACIf,KAAK,CAAEA,KAAK,CAAGF,QADnB,CAFkD,CAAN,EAA9B,CAKf,CAACE,KAAD,CAAQF,QAAR,CALe,CAAlB,CAQA,GAAMmB,CAAAA,UAAU,CAAG,uBACf,UAAM,CACF,MAAOhB,CAAAA,IAAI,CAAC,CAAEG,QAAQ,CAAEA,QAAZ,CAAD,CAAX,CACH,CAHc,CAIf,CAACT,KAAD,CAJe,CAAnB,CAMA,MACI,8BAAC,iBAAD,0BAAuBH,cAAc,CAACC,KAAD,CAArC,+EACI,6BAAC,iBAAD,EAAM,KAAK,CAAEsB,SAAb,8EACI,6BAAC,8BAAD,CAAU,IAAV,EAAe,KAAK,CAAEN,kBAAtB,8EACKQ,UAAU,EADf,CADJ,CADJ,CADJ,CASH,CApDD,CAsDA,GAAMC,CAAAA,SAAS,CAAG,gBAAKxB,sBAAL,CAA6B,SAACyB,SAAD,CAAYC,SAAZ,QAA0B,8BAAOD,SAAP,CAAkBC,SAAlB,CAA1B,EAA7B,CAAlB,C,aACeF,S","sourcesContent":["import React, { memo, useMemo, useCallback } from 'react'\nimport { View, ViewStyle, StyleProp } from 'react-native'\nimport equals from 'react-fast-compare'\nimport { styles } from './style'\nimport { createNativeWrapper, TouchableOpacity, State } from 'react-native-gesture-handler';\nimport Animated, { eq, cond, interpolate, useCode, set, and, not, round, clockRunning } from 'react-native-reanimated';\nimport { onGestureEvent, useValues, withTimingTransition } from 'react-native-redash';\nimport { TabBarItemProps } from '../../types';\n\nconst AnimatedRawButton = createNativeWrapper(\n    Animated.createAnimatedComponent(TouchableOpacity),\n    {\n        shouldCancelWhenOutside: true,\n        shouldActivateOnStart: true,\n    }\n);\nconst gestureHandler = (state: Animated.Value<State>) =>\n    onGestureEvent({ state });\n\nconst ButtonTabItemComponent = (props: TabBarItemProps) => {\n    const { index, selectedIndex, countTab, indexAnimated, width, icon, clock } = props;\n    const isActive = eq(round(indexAnimated), index)\n    const progress = withTimingTransition(isActive, { duration: 200 })\n    const [state] = useValues(State.UNDETERMINED);\n    // effect\n    useCode(\n        () =>\n            cond(and(eq(indexAnimated, selectedIndex), not(clockRunning(clock)), eq(state, State.END)), [\n                set(selectedIndex, index),\n                set(state, State.UNDETERMINED),\n            ]),\n        [state, clock,]\n    );\n    // style\n    const containerIconStyle = [{\n\n        opacity: interpolate(progress, {\n            inputRange: [0, 1],\n            outputRange: [1, 0]\n        }),\n        transform: [{\n            translateY: interpolate(progress, {\n                inputRange: [0, 1],\n                outputRange: [0, 50]\n            })\n        }]\n    }\n    ] as StyleProp<Animated.AnimateStyle<ViewStyle>>;\n    const buttonTab = useMemo<StyleProp<ViewStyle>>(() => [\n        styles.buttonTab,\n        {\n            width: width / countTab,\n        }\n    ], [width, countTab])\n\n    // render\n    const renderIcon = useCallback(\n        () => {\n            return icon({ progress: progress })\n        },\n        [props],\n    )\n    return (\n        <AnimatedRawButton {...gestureHandler(state)}>\n            <View style={buttonTab}>\n                <Animated.View style={containerIconStyle}>\n                    {renderIcon()}\n                </Animated.View>\n            </View>\n        </AnimatedRawButton>\n    )\n}\n\nconst ButtonTab = memo(ButtonTabItemComponent, (prevProps, nextProps) => equals(prevProps, nextProps))\nexport default ButtonTab\n"]}